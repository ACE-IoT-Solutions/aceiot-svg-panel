{"version":3,"sources":["../src/svg_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","rendering","SVGDemos","Snap","SVGCtrl","$scope","$injector","$rootScope","panelDefaults","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","aliasColors","format","svg_data","js_code","js_init_code","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","demos","initialized","addEditorTab","unitFormats","getUnitFormats","subItem","value","render","series","color","alias","handleMetric","Function","doInit","setHandleMetricFunction","setInitFunction","dataList","map","seriesHandler","seriesData","datapoints","target","flotpairs","getFlotPairs","aliasName","i","length","getSeriesIdByAlias","isNumber","decimals","scaledDecimals","delta","dec","Math","floor","log","LN10","magn","pow","norm","size","result","max","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"svg_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport rendering from './rendering';\nimport { SVGDemos } from './demos';\nimport { Snap } from './node_modules/snapsvg/dist/snap.svg-min.js';\n\nexport class SVGCtrl extends MetricsPanelCtrl {\n\n    constructor($scope, $injector, $rootScope) {\n        super($scope, $injector);\n        this.$rootScope = $rootScope;\n\n        var panelDefaults = {\n            links: [],\n            datasource: null,\n            maxDataPoints: 3,\n            interval: null,\n            targets: [{}],\n            cacheTimeout: null,\n            nullPointMode: 'connected',\n            aliasColors: {},\n            format: 'short',\n\n            svg_data: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 1000 1000\" ></svg>',\n            js_code: '',\n            js_init_code: ''\n        };\n\n        _.defaults(this.panel, panelDefaults);\n\n        this.events.on('render', this.onRender.bind(this));\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n        this.demos = new SVGDemos(this);\n        this.initialized = 0;\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/grafana-svg-panel/editor.html', 2);\n        this.unitFormats = kbn.getUnitFormats();\n    }\n\n    setUnitFormat(subItem) {\n        this.panel.format = subItem.value;\n        this.render();\n    }\n\n    onDataError() {\n        this.series = [];\n        this.render();\n    }\n\n    changeSeriesColor(series, color) {\n        series.color = color;\n        this.panel.aliasColors[series.alias] = series.color;\n        this.render();\n    }\n\n    setHandleMetricFunction() {\n        this.panel.handleMetric = Function('ctrl', 'svgnode', this.panel.js_code);\n    }\n\n    setInitFunction() {\n        this.initialized = 0;\n        this.panel.doInit = Function('ctrl', 'svgnode', this.panel.js_init_code);\n    }\n\n    onRender() {\n        if (!this.panel.handleMetric) {\n            this.setHandleMetricFunction();\n        }\n\n        if (!this.panel.doInit) {\n            this.setInitFunction();\n        }\n    }\n\n    onDataReceived(dataList) {\n        this.series = dataList.map(this.seriesHandler.bind(this));\n        this.render();\n    }\n\n    resetSVG() {\n        this.initialized = 0;\n    }\n\n    seriesHandler(seriesData) {\n        var series = new TimeSeries({\n            datapoints: seriesData.datapoints,\n            alias: seriesData.target\n        });\n\n        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n        return series;\n    }\n\n    getSeriesIdByAlias(aliasName) {\n        for (var i = 0; i < this.series.length; i++) {\n            if (this.series[i].alias == aliasName) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    getSeriesElementByAlias(aliasName) {\n        var i = this.getSeriesIdByAlias(aliasName);\n        if (i >= 0) {\n            return this.series[i];\n        }\n        return null;\n    }\n\n    getDecimalsForValue(value) {\n        if (_.isNumber(this.panel.decimals)) {\n            return { decimals: this.panel.decimals, scaledDecimals: null };\n        }\n\n        var delta = value / 2;\n        var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n        var magn = Math.pow(10, -dec);\n        var norm = delta / magn; // norm is between 1.0 and 10.0\n        var size;\n\n        if (norm < 1.5) {\n            size = 1;\n        } else if (norm < 3) {\n            size = 2;\n            // special case for 2.5, requires an extra decimal\n            if (norm > 2.25) {\n                size = 2.5;\n                ++dec;\n            }\n        } else if (norm < 7.5) {\n            size = 5;\n        } else {\n            size = 10;\n        }\n\n        size *= magn;\n\n        // reduce starting decimals if not needed\n        if (Math.floor(value) === value) { dec = 0; }\n\n        var result = {};\n        result.decimals = Math.max(0, dec);\n        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n        return result;\n    }\n\n    formatValue(value) {\n        var decimalInfo = this.getDecimalsForValue(value);\n        var formatFunc = kbn.valueFormats[this.panel.format];\n        if (formatFunc) {\n            return formatFunc(value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n        }\n        return value;\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        rendering(scope, elem, attrs, ctrl);\n    }\n\n}\n\nSVGCtrl.templateUrl = 'module.html';"]}